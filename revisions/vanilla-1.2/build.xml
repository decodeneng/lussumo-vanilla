<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 1 Oct 2007 16:22:21

	 Vanilla builder
	 Build a new release of vanilla

	 Damien Lebrun
	 ====================================================================== -->
<project name="Vanilla builder" default="build">
	<description>
			Build a new release of vanilla
	</description>

	<property name="vanilla.version" value="1.2.alpha.0"/>
	<property name="framework.version" value="1.2.alpha.0"/>
	<property name="people.version" value="1.2.alpha.0"/>

	<property name="build.dir" value="${basedir}${file.separator}build${file.separator}"/>
	<property name="dist.dir" value="${basedir}${file.separator}dist${file.separator}"/>
	<property name="src.dir" value="${basedir}${file.separator}src${file.separator}"/>

	<property name="dist.name" value="Vanilla-${vanilla.version}"/>
	<property name="dist.zip" value="${dist.dir}${file.separator}${dist.name}.zip"/>

	<property name="build.vanilla.dir" value="${build.dir}${file.separator}${dist.name}"/>
	<property name="jar.compressor.path" value="${basedir}${file.separator}tools${file.separator}jar${file.separator}yuicompressor.jar"/>
	<property name="src.js.dir" value="${src.dir}${file.separator}js${file.separator}"/>
	<property name="build.js.dir" value="${build.vanilla.dir}${file.separator}js${file.separator}"/>

	<property name="project.ant.lib.dir" value="${basedir}${file.separator}tools${file.separator}ant-library${file.separator}"/>

	<property name="svn.vanilla.base" value="http://lussumo.com/svn/vanilla/"/>
	<property name="svn.framework.base" value="http://lussumo.com/svn/framework/"/>
	<property name="svn.people.base" value="http://lussumo.com/svn/people/"/>
	<property name="svn.vanilla.src" value="${svn.vanilla.base}revisions/vanilla-1.2"/>
	<property name="svn.framework.src" value="${svn.framework.base}framework1.2"/>
	<property name="svn.people.src" value="${svn.people.base}branches/people-1.2"/>
	<property name="svn.vanilla.tag" value="${svn.vanilla.base}tags/Vanilla-${vanilla.version}"/>
	<property name="svn.framework.tag" value="${svn.framework.base}tags/Framework-${framework.version}"/>
	<property name="svn.people.tag" value="${svn.vanilla.base}tags/People-${people.version}"/>
	<property name="svn.wc.path" value="${basedir}"/>
	<property name="svn.wc.status" value=""/>

	<property name="svn.framework.folder" value="src/library/Framework"/>
	<property name="svn.people.folder" value="src/library/People"/>


	<property file="build.properties"/>


	<!-- =================================
			  target: build
			  		 ================================= -->
	<target name="build" depends="prepare" description="--> Build a new release of vanilla">
		<echo level="info" message="${line.separator}Copy files which do not need any processing..."/>
		<!-- binary file could be corrupted if filtered, so we copy them separatly -->
		<copy todir="${build.vanilla.dir}" verbose="true">
			<fileset dir="${src.dir}">
				<exclude name="**/*.php"/>
				<exclude name="**/*.html"/>
				<exclude name="js/*.js"/>
				<exclude name="**/.svn/**"/>
			</fileset>
		</copy>
		<echo level="info" message="${line.separator}Copy php and html files, replacing version number..."/>
		<!-- Filter php and html files for the version number -->
		<copy todir="${build.vanilla.dir}" verbose="true" encoding="UTF-8">
			<fileset dir="${src.dir}">
				<include name="**/*.php"/>
				<include name="**/*.html"/>
			</fileset>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VANILLA-VERSION" value="${vanilla.version}"/>
				<filter token="FRAMEWORK-VERSION" value="${framework.version}"/>
				<filter token="PEOPLE-VERSION" value="${people.version}"/>
			</filterset>
		</copy>
		<echo level="info" message="${line.separator}Compress js file..."/>
		<!-- Compress js files with Julien Lecomte's YUI Compressor -->
		<apply executable="java" parallel="false" addsourcefile="false" verbose="true">
			<fileset dir="${src.js.dir}" includes="*.js"/>
			<arg line="-jar"/>
			<arg path="${jar.compressor.path}"/>
			<arg line="--charset UTF-8"/>
			<arg line="--type js"/>
			<redirector>
				<!-- redirect STDIN; fileset collects relative to its dir, but we need -->
				<!-- relative to basedir -->
				<inputmapper type="glob" from="*" to="${src.js.dir}*"/>
				<!-- redirect STDOUT to file in dest-dir -->
				<outputmapper id="out" type="glob" from="*.js" to="${build.js.dir}*.js"/>
			</redirector>
		</apply>
		<echo level="info" message="${line.separator}css compression is possible but does not support one hack use in vanilla.css."/>
		<echo level="info" message="${line.separator}Build package..."/>
		<!-- Pack the Vanilla -->
		<zip basedir="${build.dir}" destfile="${dist.zip}" level="9"/>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
			  target: prepare
			 - - - - - - - - - - - - - - - - - -->
	<target name="prepare" depends="clean">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}${file.separator}${dist.name}"/>
		<mkdir dir="${dist.dir}"/>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
			  target: clean
			 - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}">
				<include name="**/**"/>
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="**/**"/>
			</fileset>
		</delete>
	</target>


	<!-- =================================
		  target: tag
		 ================================= -->
	<target name="tag" depends="initSvnTask" description="--> Tag a new version of Vanilla">
		<echo level="info" message="${line.separator}Tag Vanilla ${vanilla.version}, People ${people.version} and Framework ${framework.version}."/>
		<svn username="${svn.username}" password="${svn.password}">
			<!-- Tag People and Framework first -->
			<copy srcUrl="${svn.framework.src}" destUrl="${svn.framework.tag}" message="Tag version ${framework.version}"/>
			<copy srcUrl="${svn.people.src}" destUrl="${svn.people.tag}" message="Tag version ${people.version}"/>
			<!-- Change svn:externals of framework and people for the tagged versions -->
			<propset path="${svn.wc.path}" name="svn:externals" value="${svn.framework.folder} ${svn.framework.tag}${line.separator}${svn.people.folder} ${svn.people.tag}"/>
			<!-- Tag the working copy -->
			<copy srcPath="${svn.wc.path}" destUrl="${svn.vanilla.tag}" message="Tag version ${vanilla.version}"/>
			<!-- reverse the svn:externals change -->
			<revert dir="${svn.wc.path}" recurse="false"/>
		</svn>
	</target>

	<!-- =================================
		  target: commit
		 ================================= -->
	<target name="commit" depends="initSvnTask" description="--> Commit changes">
		<echo level="info" message="${line.separator}Commit Vanilla, People and Framework.${line.separator}${svn.message}"/>
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.wc.path}"/>
			<commit dir="${svn.wc.path}" message="${svn.message}"/>
			<commit dir="${svn.wc.path}${file.separator}${svn.people.folder}" message="${svn.message}"/>
			<commit dir="${svn.wc.path}${file.separator}${svn.framework.folder}" message="${svn.message}"/>
			<status path="./" propstatusproperty="svn.wc.status"/>
		</svn>
		<echo>Statue: ${svn.wc.status}</echo>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
		  target: init
		 - - - - - - - - - - - - - - - - - -->
	<target name="initSvnTask">
		<path id="project.classpath">
			<fileset dir="${project.ant.lib.dir}">
				<include name="**/*.jar"/>
			</fileset>
 		</path>
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath"/>
	</target>
</project>
