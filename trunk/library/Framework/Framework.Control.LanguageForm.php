<?php
/*
* Copyright 2003 - 2005 Mark O'Sullivan
* This file is part of Vanilla.
* Vanilla is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
* Vanilla is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with Vanilla; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
* The latest source code for Vanilla is available at www.lussumo.com
* Contact Mark O'Sullivan at mark [at] lussumo [dot] com
*
* Description: The LanguageForm control is used to change the included language dictionary from the available dictionaries in the /languages folder
*/


class LanguageForm extends PostBackControl {
	var $Languages;
	var $LanguageSelect;
	var $CurrentLanguageKey;
	
	function DefineLanguages() {
      // Look in the provided path for files
      $FolderHandle = @opendir($this->Context->Configuration["LANGUAGES_PATH"]);
      if (!$FolderHandle) {
         $this->Context->WarningCollector->Add(str_replace("//1", $this->Context->Configuration["LANGUAGES_PATH"], $this->Context->GetDefinition("ErrOpenDirectoryLanguages")));
      } else {
			$this->Languages = array();
         
         // Loop through each file
         while (false !== ($Item = readdir($FolderHandle))) {
            $RecordItem = true;
            if ($Item == "." || $Item == ".." || is_dir($this->Context->Configuration["LANGUAGES_PATH"].$Item)) {
               // do nothing
            } else {
               // Retrieve languages names
					$FileParts = explode(".", $Item);
					if (count($FileParts) == 2 && $FileParts[1] == "php") $this->Languages[] = $FileParts[0];
            }
         }
      }
   }
	function LanguageForm(&$Context) {
		$this->Name = "LanguageForm";
		$this->ValidActions = array("LanguageChange", "ProcessLanguageChange");
		$this->Constructor($Context);
		if (!$this->Context->Session->User->Permission("PERMISSION_MANAGE_LANGUAGE")) {
			$this->IsPostBack = 0;
		} elseif ($this->IsPostBack) {
			$this->DefineLanguages();
			$this->LanguageSelect = $this->Context->ObjectFactory->NewObject($Context, "Select");
			$this->LanguageSelect->Name = "LanguageKey";
			for ($i = 0; $i < count($this->Languages); $i++) {
				$this->LanguageSelect->AddOption($i, $this->Languages[$i]);
				if ($this->Languages[$i] == $this->Context->GetDefinition("ThisLanguageName")) $this->LanguageSelect->SelectedID = $i;
			}
			if ($this->PostBackAction == "ProcessLanguageChange") {
				$LanguageKey = ForceIncomingInt("LanguageKey", 0);
				// Grab that language from the languages array
            $Language = $this->Languages[$LanguageKey];
				if ($Language) {
					// Open the language file for editing
               $LanguageFile = $this->Context->Configuration["APPLICATION_PATH"]."conf/language.php";
					$LanguageFileContents = "<?php
/*
DO NOT EDIT THIS FILE
This file is managed by Vanilla. It is completely erased
and rebuilt when the language is defined.
*/
include(\$Configuration[\"LANGUAGES_PATH\"].\"".$Language.".php\");
include(\$Configuration[\"APPLICATION_PATH\"].\"conf/".$Language.".php\");
?>";
					// Save the extensions file
					// Open for writing only.
					// Place the file pointer at the beginning of the file and truncate the file to zero length. 
					$FileHandle = @fopen($LanguageFile, "wb");
					if (!$FileHandle) {
						$this->Context->WarningCollector->Add(str_replace("//1", $LanguageFile, $this->Context->GetDefinition("ErrOpenFileEnd")));
					} else {
						if (!@fwrite($FileHandle, $LanguageFileContents)) $this->Context->WarningCollector->Add($this->Context->GetDefinition("ErrWriteFile"));
					}
					@fclose($FileHandle);
					
					// If everything was successful, mark the postback as validated
					if ($this->Context->WarningCollector->Iif()) $this->PostBackValidated = 1;
				}
			}
		}
		$this->CallDelegate("Constructor");
	}
	
	function Render_ValidPostBack() {
		$this->CallDelegate("PreValidPostBackRender");
		include($this->Context->Configuration["THEME_PATH"]."templates/settings_language_form_validpostback.php");
		$this->CallDelegate("PostValidPostBackRender");
	}
	
	function Render_NoPostBack() {
		if ($this->IsPostBack) {
			$this->CallDelegate("PreNoPostBackRender");
			include($this->Context->Configuration["THEME_PATH"]."templates/settings_language_form_nopostback.php");
			$this->CallDelegate("PostNoPostBackRender");
		}
	}
}


?>
