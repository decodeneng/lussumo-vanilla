<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 1 Oct 2007 16:22:21

	 Vanilla Builder
	 Build a new release of vanilla

	 Copyright 2007 Lussumo
	 This file is part of Lussumo's Software Library.
	 Lussumo's Software Library is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
	 Lussumo's Software Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
	 You should have received a copy of the GNU General Public License along with Vanilla; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	 The latest source code is available at www.lussumo.com
	 Contact Mark O'Sullivan at mark [at] lussumo [dot] com

	 @author Damien Lebrun
	 @copyright 2007 Lussumo
	 @license http://lussumo.com/community/gpl.txt GPLv2


	 Requirements:

 	 - JDK 1.5+
 	 - Ant 1.7
 	 - PHPDocumentor 1.4 (not yet implemented)

	 Usage:

	 ant [options] [target]

	  Options:

	  See Ant manual (http://ant.apache.org/manual/index.html)

	  Targets:

		build:
		  Build a Vanilla package.
		  Edit the *.version properties.

		tag:
		  Tag the working copy of Vanilla - People and Framework.
		  You might have to edit *.version properties and the build.properties file
		  for you svn username and password (create one from build.properties-tmp).

		commit:
		  Commit your working copy.
		  You might have to edit the build.properties file for you svn username and password,
		  and the commit message.

		update:
		  Update your working copy
		  You might have to edit the build.properties file for you svn username and password.

		clean:
		  Remove build and dist folder.

		prepare:
		  Create build and dist folder.


	 ====================================================================== -->
<project name="Vanilla builder" default="build">
	<description>
			Build a new release of vanilla
	</description>

	<!-- Vanilla, People and Framework versions -->
	<property name="vanilla.version"	value="1.1.3.a"/>
	<property name="framework.version"	value="1.1.2.a"/>
	<property name="people.version"		value="1.1.2.a"/>

	<!-- path to build, dist and src folders -->
	<property name="build.dir"	value="${basedir}${file.separator}build${file.separator}"/>
	<property name="dist.dir"	value="${basedir}${file.separator}dist${file.separator}"/>
	<property name="src.dir"	value="${basedir}${file.separator}src${file.separator}"/>

	<!-- name of the folder and zip package name (eg: Vanilla-1.2) -->
	<property name="dist.name"			value="Vanilla-${vanilla.version}"/>
	<property name="dist.zip"			value="${dist.dir}${file.separator}${dist.name}.zip"/>
	<property name="build.vanilla.dir"	value="${build.dir}${file.separator}${dist.name}"/>

	<!-- Js compression vanilla related -->
	<property name="jar.compressor.path"	value="${basedir}${file.separator}tools${file.separator}jar${file.separator}yuicompressor.jar"/>
	<property name="src.js.dir"				value="${src.dir}${file.separator}js${file.separator}"/>
	<property name="build.js.dir"			value="${build.vanilla.dir}${file.separator}js${file.separator}"/>

	<!-- External ant task lib folder -->
	<property name="project.ant.lib.dir" value="${basedir}${file.separator}tools${file.separator}ant-library${file.separator}"/>

	<!-- SVN related properties -->
	<property name="svn.vanilla.base"	value="http://lussumo.com/svn/vanilla/"/>
	<property name="svn.vanilla.src"	value="${svn.vanilla.base}trunk"/>
	<property name="svn.vanilla.tag"	value="${svn.vanilla.base}tags/Vanilla-${vanilla.version}"/>

	<property name="svn.framework.base"	value="http://lussumo.com/svn/framework/"/>
	<property name="svn.framework.src"	value="${svn.framework.base}trunk"/>
	<property name="svn.framework.tag"	value="${svn.framework.base}tags/Framework-${framework.version}"/>
	<property name="svn.framework.folder" value="src/library/Framework"/>

	<property name="svn.people.base"	value="http://lussumo.com/svn/people/"/>
	<property name="svn.people.src"		value="${svn.people.base}trunk"/>
	<property name="svn.people.tag"		value="${svn.people.base}tags/People-${people.version}"/>
	<property name="svn.people.folder"	value="src/library/People"/>

	<property name="svn.wc.path"		value="${basedir}"/>
	<property name="svn.wc.status"		value=""/>
	<property name="svn.update.rev"		value="HEAD"/>

	<!--	User related properties (username and password).
			Copy build.properties-tmp to build.property and file it with your username, password...	-->
	<property file="build.properties"/>


	<!-- =================================
			  target: build
			  		 ================================= -->
	<target name="build" depends="prepare" description="--> Build a new release of vanilla">
		<echo level="info" message="${line.separator}Copy files which do not need any processing..."/>
		<!-- binary file could be corrupted if filtered, so we copy them separatly -->
		<copy todir="${build.vanilla.dir}" verbose="true">
			<fileset dir="${src.dir}">
				<exclude name="**/*.php"/>
				<exclude name="**/*.html"/>
				<exclude name="js/*.js"/>
				<exclude name="**/.svn/**"/>
			</fileset>
		</copy>
		<echo level="info" message="${line.separator}Copy php and html files, replacing version number..."/>
		<!-- Filter php and html files for the version number -->
		<copy todir="${build.vanilla.dir}" verbose="true" encoding="UTF-8">
			<fileset dir="${src.dir}">
				<include name="**/*.php"/>
				<include name="**/*.html"/>
			</fileset>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VANILLA-VERSION" value="${vanilla.version}"/>
				<filter token="FRAMEWORK-VERSION" value="${framework.version}"/>
				<filter token="PEOPLE-VERSION" value="${people.version}"/>
			</filterset>
		</copy>
		<echo level="info" message="${line.separator}Compress js file..."/>
		<!-- Compress js files with Julien Lecomte's YUI Compressor -->
		<apply executable="java" parallel="false" addsourcefile="false" verbose="true">
			<fileset dir="${src.js.dir}" includes="*.js"/>
			<arg line="-jar"/>
			<arg path="${jar.compressor.path}"/>
			<arg line="--charset UTF-8"/>
			<arg line="--type js"/>
			<redirector>
				<!-- redirect STDIN; fileset collects relative to its dir, but we need -->
				<!-- relative to basedir -->
				<inputmapper type="glob" from="*" to="${src.js.dir}*"/>
				<!-- redirect STDOUT to file in dest-dir -->
				<outputmapper id="out" type="glob" from="*.js" to="${build.js.dir}*.js"/>
			</redirector>
		</apply>
		<echo level="info" message="${line.separator}css compression is possible for css files but does not support one hack use in vanilla.css."/>
		<echo level="info" message="${line.separator}Build package..."/>
		<!-- Pack Vanilla -->
		<zip basedir="${build.dir}" destfile="${dist.zip}" level="9"/>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
			  target: prepare
			 - - - - - - - - - - - - - - - - - -->
	<target name="prepare" depends="clean">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}${file.separator}${dist.name}"/>
		<mkdir dir="${dist.dir}"/>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
			  target: clean
			 - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}">
				<include name="**/**"/>
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="**/**"/>
			</fileset>
		</delete>
	</target>


	<!-- =================================
		  target: tag
		 ================================= -->
	<target name="tag" depends="update" description="--> Tag a new release of Vanilla">
		<echo level="info" message="${line.separator}Tag Vanilla ${vanilla.version}, People ${people.version} and Framework ${framework.version}."/>
		<fail message="Status: ${svn.wc.status}.${line.separator}Check-it out first before tagging the working copy">
			<condition>
				<or>
					<equals arg1="${svn.wc.status}" arg2="conflicted" casesensitive="true" trim="true"/>
					<equals arg1="${svn.wc.status}" arg2="modified" casesensitive="true" trim="true"/>
				</or>
			</condition>
		</fail>
		<svn username="${svn.username}" password="${svn.password}">
			<!-- Tag People and Framework first -->
			<copy srcUrl="${svn.framework.src}" destUrl="${svn.framework.tag}" message="Tag version ${framework.version}"/>
			<copy srcUrl="${svn.people.src}" destUrl="${svn.people.tag}" message="Tag version ${people.version}"/>
			<!-- Change svn:externals of framework and people for the tagged versions -->
			<propset path="${svn.wc.path}" name="svn:externals" value="${svn.framework.folder} ${svn.framework.tag}${line.separator}${svn.people.folder} ${svn.people.tag}"/>
			<!-- Tag the working copy -->
			<copy srcPath="${svn.wc.path}" destUrl="${svn.vanilla.tag}" message="Tag version ${vanilla.version}"/>
			<!-- reverse the svn:externals change -->
			<revert dir="${svn.wc.path}" recurse="false"/>
		</svn>
	</target>

	<!-- =================================
		  target: commit
		 ================================= -->
	<target name="commit" depends="update" description="--> Commit changes">
		<echo level="info" message="${line.separator}Commit Vanilla, People and Framework.${line.separator}${svn.message}"/>
		<echo level="info" message="${line.separator}Commit working copy to ${svn.vanilla.src}...${line.separator}Message: ${svn.message}"/>
		<fail message="Status: ${svn.wc.status}.${line.separator}Fix conflict first.">
			<condition>
				<equals arg1="${svn.wc.status}" arg2="conflicted" casesensitive="true" trim="true"/>
			</condition>
		</fail>
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${svn.wc.path}" message="${svn.message}"/>
			<commit dir="${svn.wc.path}${file.separator}${svn.people.folder}" message="${svn.message}"/>
			<commit dir="${svn.wc.path}${file.separator}${svn.framework.folder}" message="${svn.message}"/>
			<status path="./" propstatusproperty="svn.wc.status"/>
		</svn>
		<echo>Status: ${svn.wc.status}</echo>
	</target>

	<!-- =================================
		  target: update
		 ================================= -->
	<target name="update" depends="initSvnTask" description="--> Update working copy">
		<echo level="info" message="Update working copy with ${svn.vanilla.src}..." />
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.wc.path}" revision="${svn.update.rev}"/>
			<status path="${svn.wc.path}" propstatusproperty="svn.wc.status"/>
		</svn>
		<echo>Status: ${svn.wc.status}</echo>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
		  target: init
		 - - - - - - - - - - - - - - - - - -->
	<target name="initSvnTask">
		<path id="project.classpath">
			<fileset dir="${project.ant.lib.dir}">
				<include name="**/*.jar"/>
			</fileset>
 		</path>
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath"/>
	</target>
</project>
