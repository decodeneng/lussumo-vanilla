<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 1 Oct 2007 16:22:21

	 Vanilla Builder
	 Build a new release of vanilla

	 Copyright 2007 Lussumo
	 This file is part of Lussumo's Software Library.
	 Lussumo's Software Library is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
	 Lussumo's Software Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
	 You should have received a copy of the GNU General Public License along with Vanilla; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	 The latest source code is available at www.lussumo.com
	 Contact Mark O'Sullivan at mark [at] lussumo [dot] com

	 @author Damien Lebrun
	 @copyright 2007 Lussumo
	 @license http://lussumo.com/community/gpl.txt GPLv2


	 Requirements:

 	 - JDK 1.5+
 	 - Ant 1.7
 	 - PHPDocumentor 1.4 (not yet implemented)

	 Usage:

	 ant [options] [target]

	  Options:

	  See Ant manual (http://ant.apache.org/manual/index.html)

	  Targets:

		buildPackage:
		  Build vanilla packages (vanilla and update).
		  You should edit the *.version properties (line 75).

		buildVanilla:
		  Build a Vanilla package.
		  You should edit the *.version properties (line 75).

		buildUpdate:
		  Build a Vanilla Update package.
		  You should edit the *.version properties (line 75).

		tag:
		  Tag the working copy of Vanilla - People and Framework.
		  You might have to edit *.version properties (line 75) and the build.properties file
		  for your svn username and password (create one from build.properties-tmp).

		getChanges:
		  Will create diff files for vanilla, people and framework and list of the files modified
		  since the last release. You should edit the *.version properties (line 75).

		update:
		  Update your working copy
		  You might have to edit the build.properties file for you svn username and password.

		clean:
		  Remove build and dist folder.

		prepare:
		  Create build and dist folder.


	 ====================================================================== -->
<project name="Vanilla builder" default="buildVanilla">
	<description>
			Build a new release of vanilla
	</description>

	<!-- Vanilla, People and Framework new release versions -->
	<property name="vanilla.version"		value="1.1.4"/>
	<property name="framework.version"		value="1.1.3"/>
	<property name="people.version"			value="1.1.3"/>
	<!-- The previous release version -->
	<property name="vanilla.old.version"	value="1.1.3"/>

	<!-- path to build, dist and src folders -->
	<property name="build.dir"	value="${basedir}${file.separator}build${file.separator}"/>
	<property name="dist.dir"	value="${basedir}${file.separator}dist${file.separator}"/>
	<property name="src.dir"	value="${basedir}${file.separator}src${file.separator}"/>
	<property name="tools.dir"	value="${basedir}${file.separator}tools${file.separator}"/>

	<!-- name of the folder and zip package name (eg: Vanilla-1.2) -->
	<property name="dist.installer.name"	value="Vanilla-${vanilla.version}"/>
	<property name="dist.upgrader.name"		value="Vanilla-upgrade-${vanilla.old.version}-to-${vanilla.version}"/>
	<property name="dist.installer.src"		value="${build.dir}install${file.separator}"/>
	<property name="dist.upgrader.src"		value="${build.dir}upgrade${file.separator}"/>
	<property name="dist.installer.zip"		value="${dist.dir}${dist.installer.name}.zip"/>
	<property name="dist.upgrader.zip"		value="${dist.dir}${dist.upgrader.name}.zip"/>
	<property name="build.vanilla.installer.dir"	value="${dist.installer.src}${dist.installer.name}"/>
	<property name="build.vanilla.upgrader.dir"		value="${dist.upgrader.src}${dist.installer.name}"/>

	<!-- Js compression vanilla related -->
	<property name="jar.compressor.path"	value="${tools.dir}jar${file.separator}yuicompressor.jar"/>
	<property name="src.js.dir"				value="${src.dir}js${file.separator}"/>
	<property name="build.js.dir"			value="${build.vanilla.installer.dir}${file.separator}js${file.separator}"/>

	<!-- External ant task lib folder -->
	<property name="project.ant.lib.dir" value="${tools.dir}ant-library${file.separator}"/>

	<!-- SVN related properties -->
	<property name="svn.vanilla.base"	value="http://lussumo.com/svn/vanilla/"/>
	<property name="svn.vanilla.src"	value="${svn.vanilla.base}trunk"/>
	<property name="svn.vanilla.tag"	value="${svn.vanilla.base}tags/Vanilla-${vanilla.version}"/>

	<property name="svn.framework.base"	value="http://lussumo.com/svn/framework/"/>
	<property name="svn.framework.src"	value="${svn.framework.base}trunk"/>
	<property name="svn.framework.tag"	value="${svn.framework.base}tags/Framework-${framework.version}"/>
	<property name="svn.framework.folder" value="src/library/Framework"/>

	<property name="svn.people.base"	value="http://lussumo.com/svn/people/"/>
	<property name="svn.people.src"		value="${svn.people.base}trunk"/>
	<property name="svn.people.tag"		value="${svn.people.base}tags/People-${people.version}"/>
	<property name="svn.people.folder"	value="src/library/People"/>

	<property name="svn.wc.path"		value="${basedir}"/>
	<property name="svn.wc.status"		value=""/>
	<property name="svn.update.rev"		value="HEAD"/>

	<property name="svn.vanilla.diff.new.path"	value="/src"/>
	<property name="svn.vanilla.diff.old.path"	value="/src"/>
	<property name="svn.vanilla.diff.new.url"	value="${svn.vanilla.src}${svn.vanilla.diff.new.path}"/>
	<property name="svn.vanilla.diff.old.url"	value="${svn.vanilla.base}tags/Vanilla-${vanilla.old.version}${svn.vanilla.diff.old.path}"/>

	<property name="svn.vanilla.diff.output.path"	value="${build.dir}vanilla.diff"/>
	<property name="svn.framework.diff.output.path" value="${build.dir}framework.diff"/>
	<property name="svn.people.diff.output.path"	value="${build.dir}people.diff"/>

	<property name="svn.vanilla.diff.brief.output.path"	value="${build.dir}vanilla-changes.txt"/>
	<property name="svn.framework.diff.brief.output.path" value="${build.dir}framework-changes.txt"/>
	<property name="svn.people.diff.brief.output.path"	value="${build.dir}people-changes.txt"/>

	<property name="svn.diff.brief.name"			value="diff-brief.txt"/>

	<!--	User related properties (username and password).
			Copy build.properties-tmp to build.property and file it with your username, password...	-->
	<property file="build.properties"/>


	<!-- =================================
			  target: buildPackages
			  		 ================================= -->
	<target name="buildPackage" description="--> Build a new release of vanilla">
		<echo level="info" message="${line.separator}Build package..."/>
		<!-- Pack Vanilla -->
		<zip basedir="${dist.installer.src}" destfile="${dist.installer.zip}" level="9"/>
		<zip basedir="${dist.upgrader.src}" destfile="${dist.upgrader.zip}" level="9"/>
	</target>


	<!-- =================================
		  target: buildVanilla
		 ================================= -->
	<target name="buildVanilla" depends="clean,prepare" description="--> build vanilla">
		<echo level="info" message="${line.separator}Copy files which do not need any processing..."/>
		<!-- binary file could be corrupted if filtered, so we copy them separatly -->
		<copy todir="${build.vanilla.installer.dir}" verbose="true" encoding="UTF-8" outputencoding="UTF-8">
			<fileset dir="${src.dir}">
				<exclude name="**/*.php"/>
				<exclude name="**/*.html"/>
				<exclude name="js/*.js"/>
				<exclude name="**/.svn/**"/>
			</fileset>
		</copy>
		<echo level="info" message="${line.separator}Copy php and html files, replacing version number..."/>
		<!-- Filter php and html files for the version number -->
		<copy todir="${build.vanilla.installer.dir}" verbose="true"  encoding="UTF-8" outputencoding="UTF-8">
			<fileset dir="${src.dir}">
				<include name="**/*.php"/>
				<include name="**/*.html"/>
				<exclude name="appg/version.php"/>
			</fileset>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VANILLA-VERSION" value="${vanilla.version}"/>
				<filter token="FRAMEWORK-VERSION" value="${framework.version}"/>
				<filter token="PEOPLE-VERSION" value="${people.version}"/>
			</filterset>
		</copy>
		<!-- Filter appg/version.php to change application versions -->
		<copy file="${src.dir}appg${file.separator}version.php" tofile="${build.vanilla.installer.dir}${file.separator}appg${file.separator}version.php" verbose="true" encoding="UTF-8" outputencoding="UTF-8">
			<filterchain>
				<replaceregex  pattern="FRAMEWORK_VERSION', '.*'" replace="FRAMEWORK_VERSION', '${framework.version}'"/>
				<replaceregex  pattern="PEOPLE_VERSION', '.*'" replace="PEOPLE_VERSION', '${people.version}'"/>
				<replaceregex  pattern="APPLICATION_VERSION', '.*'" replace="FRAMEWORK_VERSION', '${vanilla.version}'"/>
			</filterchain>
		</copy>
		<echo level="info" message="${line.separator}Compress js file..."/>
		<!-- Compress js files with Julien Lecomte's YUI Compressor -->
		<apply executable="java" parallel="false" addsourcefile="false" verbose="true">
			<fileset dir="${src.js.dir}" includes="*.js"/>
			<arg line="-jar"/>
			<arg path="${jar.compressor.path}"/>
			<arg line="--charset UTF-8"/>
			<arg line="--type js"/>
			<redirector>
				<!-- redirect STDIN; fileset collects relative to its dir, but we need -->
				<!-- relative to basedir -->
				<inputmapper type="glob" from="*" to="${src.js.dir}*"/>
				<!-- redirect STDOUT to file in dest-dir -->
				<outputmapper id="out" type="glob" from="*.js" to="${build.js.dir}*.js"/>
			</redirector>
		</apply>
		<echo level="info" message="${line.separator}css compression is possible for css files but it does not support one hack use in vanilla.css."/>

	</target>


	<!-- =================================
		  target: buildUpdate
		 ================================= -->
	<target name="buildUpdate" depends="buildVanilla,getChanges" description="--> description">
		<copy todir="${build.vanilla.upgrader.dir}" verbose="true">
			<fileset dir="${build.vanilla.installer.dir}" includesfile="${build.dir}${svn.diff.brief.name}"/>
		</copy>
	</target>


	<!-- =================================
		  target: tag
		 ================================= -->
	<target name="tag" depends="checkModification" description="--> Tag a new release of Vanilla">
		<echo level="info" message="${line.separator}Tag Vanilla ${vanilla.version}, People ${people.version} and Framework ${framework.version}."/>
		<svn username="${svn.username}" password="${svn.password}">
			<!-- Tag People and Framework first -->
			<copy srcUrl="${svn.framework.src}" destUrl="${svn.framework.tag}" message="Tag version ${framework.version}"/>
			<copy srcUrl="${svn.people.src}" destUrl="${svn.people.tag}" message="Tag version ${people.version}"/>
			<!-- Change svn:externals of framework and people for the tagged versions -->
			<propset path="${svn.wc.path}" name="svn:externals" value="${svn.framework.folder} ${svn.framework.tag}${line.separator}${svn.people.folder} ${svn.people.tag}"/>
			<!-- Tag the working copy -->
			<copy srcPath="${svn.wc.path}" destUrl="${svn.vanilla.tag}" message="Tag version ${vanilla.version}"/>
			<!-- reverse the svn:externals change -->
			<revert dir="${svn.wc.path}" recurse="false"/>
		</svn>
	</target>


	<!-- =================================
		  target: getChanges
		 ================================= -->
	<target name="getChanges" depends="checkModification" description="--> Get changes between two release">
		<echo level="info" message="Get diff between ${svn.vanilla.diff.new.url} and ${svn.vanilla.diff.old.url}..." />

		<!-- Get the previous version numbers of people and framework -->
		<svn username="${svn.username}" password="${svn.password}">
			<propget url="${svn.vanilla.diff.old.url}/" name="svn:externals" property="svn.vanilla.diff.old.externals"/>
		</svn>
		<loadproperties>
			<string value="${svn.vanilla.diff.old.externals}"/>
			<filterchain>
				<replaceregex pattern="^.*(${svn.framework.base}.*)$" replace="svn.framework.diff.old.url = \1"/>
				<replaceregex pattern="^.*(${svn.people.base}.*)$" replace="svn.people.diff.old.url = \1"/>
			</filterchain>
		</loadproperties>

		<!-- Get Diff... -->
		<delete file="${svn.vanilla.diff.output.path}"/>
		<delete file="${svn.framework.diff.output.path}"/>
		<delete file="${svn.people.diff.output.path}"/>
		<svn username="${svn.username}" password="${svn.password}">
			<diff newurl="${svn.vanilla.diff.new.url}" oldurl="${svn.vanilla.diff.old.url}" outfile="${svn.vanilla.diff.output.path}"/>
			<diff newurl="${svn.framework.src}" oldurl="${svn.framework.diff.old.url}" outfile="${svn.framework.diff.output.path}"/>
			<diff newurl="${svn.people.src}" oldurl="${svn.people.diff.old.url}" outfile="${svn.people.diff.output.path}"/>
		</svn>

		<!-- Extract the names of changed files -->
		<copy file="${svn.vanilla.diff.output.path}" tofile="${svn.vanilla.diff.brief.output.path}" overwrite="true">
			<filterchain>
				<containsregex pattern="^Index: (.*)$" replace="\1"/>
			</filterchain>
		</copy>
		<copy file="${svn.framework.diff.output.path}" tofile="${svn.framework.diff.brief.output.path}" overwrite="true">
			<filterchain>
				<containsregex pattern="^Index: (.*)$" replace="library/Framework/\1"/>
			</filterchain>
		</copy>
		<copy file="${svn.people.diff.output.path}" tofile="${svn.people.diff.brief.output.path}" overwrite="true">
			<filterchain>
				<containsregex pattern="^Index: (.*)$" replace="library/People/\1"/>
			</filterchain>
		</copy>
		<concat destfile="${build.dir}${svn.diff.brief.name}">
			<fileset dir="${build.dir}" includes="*-changes.txt"/>
		</concat>
	</target>


	<!-- =================================
		  target: update
		 ================================= -->
	<target name="update" depends="initSvnTask" description="--> Update working copy">
		<echo level="info" message="Update working copy with ${svn.vanilla.src}..." />
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.wc.path}" revision="${svn.update.rev}"/>
		</svn>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
		  target: checkModification
		 - - - - - - - - - - - - - - - - - -->
	<target name="checkModification" depends="update">
		<resourcecount property="svn.wc.modified.count">
			<fileset dir="${svn.wc.path}">
				<svnModified/>
			</fileset>
		</resourcecount>
		<resourcecount property="svn.wc.added.count">
			<fileset dir="${svn.wc.path}">
				<svnAdded/>
			</fileset>
		</resourcecount>
		<resourcecount property="svn.wc.missing.count">
			<fileset dir="${svn.wc.path}">
				<svnMissing/>
			</fileset>
		</resourcecount>
		<resourcecount property="svn.wc.deleted.count">
			<fileset dir="${svn.wc.path}">
				<svnDeleted/>
			</fileset>
		</resourcecount>
		<fail message="Check-out the working copy first!">
			<condition>
				<not>
					<and>
						<equals arg1="${svn.wc.modified.count}" arg2="0" trim="true"/>
						<equals arg1="${svn.wc.added.count}"	arg2="0" trim="true"/>
						<equals arg1="${svn.wc.missing.count}"	arg2="0" trim="true"/>
						<equals arg1="${svn.wc.deleted.count}"	arg2="0" trim="true"/>
					</and>
				</not>
			</condition>
		</fail>
	</target>



	<!-- - - - - - - - - - - - - - - - - -
		  target: initSvnTask
		 - - - - - - - - - - - - - - - - - -->
	<target name="initSvnTask">
		<path id="project.classpath">
			<fileset dir="${project.ant.lib.dir}">
				<include name="**/*.jar"/>
			</fileset>
 		</path>
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath"/>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
			  target: prepare
			 - - - - - - - - - - - - - - - - - -->
	<target name="prepare">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.installer.src}"/>
		<mkdir dir="${dist.upgrader.src}"/>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
			  target: clean
			 - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}">
				<include name="**/**"/>
			</fileset>
			<filename name="${dist.installer.zip}"/>
			<filename name="${dist.upgrader.zip}"/>
		</delete>
	</target>

</project>
